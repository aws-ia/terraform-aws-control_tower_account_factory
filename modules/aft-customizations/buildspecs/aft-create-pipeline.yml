# Copyright Amazon.com, Inc. or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
version: 0.2

phases:
  install:
    on-failure: ABORT
    commands:
      - set -e
      # Populate Required Variables
      - DEFAULT_PATH=$(pwd)
      - TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
      - spacectl_version=1.11.0
      - download_base_url=https://github.com/spacelift-io/spacectl/releases/download/v${spacectl_version}
      - key_file=key.asc
      - zip_file=spacectl_${spacectl_version}_linux_amd64.zip
      - sig_file=spacectl_${spacectl_version}_SHA256SUMS.sig
      - sums_file=spacectl_${spacectl_version}_SHA256SUMS
      - curl -fsSLO $download_base_url/key.asc
      - test $fingerprint = $(gpg --with-fingerprint $key_file  | grep 'Key fingerprint' | awk -F'=' '{print $2}' | sed 's/\s//g')
      - gpg --import $key_file
      - curl -fsSLO $download_base_url/$zip_file
      - curl -fsSLO $download_base_url/$sig_file
      - curl -fsSLO $download_base_url/$sums_file
      - gpg --verify $sig_file $sums_file
      - cat $sums_file | grep -F $zip_file | sha256sum -c
      - unzip $zip_file
      - mv spacectl /usr/local/bin/
      - |
        ssh_key_parameter=$(aws ssm get-parameter --name /aft/config/aft-ssh-key --with-decryption 2> /dev/null || echo "None")
        if [[ $ssh_key_parameter != "None" ]]; then
          ssh_key=$(jq --raw-output ".Parameter.Value" <<< $ssh_key_parameter)
          mkdir -p ~/.ssh
          echo "Host *" >> ~/.ssh/config
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
          echo "UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          echo "$ssh_key" > ~/.ssh/ssh_key
          echo -e "\n\n" >>  ~/.ssh/ssh_key
          chmod 600 ~/.ssh/ssh_key
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/ssh_key
        fi

      # Clone AFT
      - AWS_MODULE_SOURCE=$(aws ssm get-parameter --name $SSM_AWS_MODULE_SOURCE --query "Parameter.Value" --output text)
      - AWS_MODULE_GIT_REF=$(aws ssm get-parameter --name $SSM_AWS_MODULE_GIT_REF --query "Parameter.Value" --output text)
      - git config --global credential.helper '!aws codecommit credential-helper $@'
      - git config --global credential.UseHttpPath true
      - git clone --quiet -b $AWS_MODULE_GIT_REF $AWS_MODULE_SOURCE aws-aft-core-framework

      # Generate session profiles
      - chmod +x $DEFAULT_PATH/aws-aft-core-framework/sources/scripts/creds.sh
      - $DEFAULT_PATH/aws-aft-core-framework/sources/scripts/creds.sh
  pre_build:
    on-failure: ABORT
    commands:
      - export SPACELIFT_API_KEY_ENDPOINT=$(echo -E $SPACELIFT_API_CREDENTIALS_JSON | jq -r '.api_key_endpoint')
      - export SPACELIFT_API_KEY_ID=$(echo -E $SPACELIFT_API_CREDENTIALS_JSON | jq -r '.api_key_id')
      - export SPACELIFT_API_KEY_SECRET=$(echo -E $SPACELIFT_API_CREDENTIALS_JSON | jq -r '.api_key_secret')
      - export VENDED_APPLICATION_NAME=$(aws ssm get-parameter --profile aft-target --name /aft/account-request/custom-fields/application_name --output text --query 'Parameter.Value')
  build:
    on-failure: ABORT
    commands:
      - spacectl stack task --id $SPACELIFT_STACK_ID "tofu plan -target '"'module.application_vending["'$VENDED_APPLICATION_NAME'"]'"' -out tfplan && tofu apply tfplan"
