# Copyright Amazon.com, Inc. or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
version: 0.2

phases:
  install:
    on-failure: ABORT
    commands:
      - set -e
      # Populate Required Variables
      - DEFAULT_PATH=$(pwd)
      - TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
      - TF_VERSION=$(aws ssm get-parameter --name "/aft/config/terraform/version" --query "Parameter.Value" --output text)
      - CT_MGMT_REGION=$(aws ssm get-parameter --name "/aft/config/ct-management-region" --query "Parameter.Value" --output text)
      - AFT_MGMT_ACCOUNT=$(aws ssm get-parameter --name "/aft/account/aft-management/account-id" --query "Parameter.Value" --output text)
      - AFT_EXEC_ROLE_ARN=arn:$AWS_PARTITION:iam::$AFT_MGMT_ACCOUNT:role/AWSAFTExecution
      - VENDED_EXEC_ROLE_ARN=arn:$AWS_PARTITION:iam::$VENDED_ACCOUNT_ID:role/AWSAFTExecution
      - AFT_ADMIN_ROLE_NAME=$(aws ssm get-parameter --name /aft/resources/iam/aft-administrator-role-name | jq --raw-output ".Parameter.Value")
      - AFT_ADMIN_ROLE_ARN=arn:$AWS_PARTITION:iam::$AFT_MGMT_ACCOUNT:role/$AFT_ADMIN_ROLE_NAME
      - ROLE_SESSION_NAME=$(aws ssm get-parameter --name /aft/resources/iam/aft-session-name | jq --raw-output ".Parameter.Value")
      - |
        # As of Aug 2025, CodeBuild does not support arrays between steps, so must split the input every new step
        CUSTOMIZATION_RAW=$(aws dynamodb get-item --table-name aft-request-metadata --key "{\"id\": {\"S\": \"$VENDED_ACCOUNT_ID\"}}" --attributes-to-get "account_customizations_name" | jq --raw-output ".Item.account_customizations_name.S")
        echo "Account customization value from DDB: ${CUSTOMIZATION_RAW}"
        # Split the customization on commas
        IFS="," read -ra CUSTOMIZATION_ARRAY <<< "$CUSTOMIZATION_RAW"
        echo "Customizations: ${CUSTOMIZATION_ARRAY[@]}"
        # Check if the first customization directory exists, then loop over all
        if [[ ${#CUSTOMIZATION_ARRAY[@]} -eq 0 ]]; then 
          echo "No customizations found, skipping setup."
          exit 0
        fi
        if [[ ! -d "$DEFAULT_PATH/${CUSTOMIZATION_ARRAY[0]}" ]]; then
          echo "Error: ${CUSTOMIZATION_ARRAY[0]} is specified as an account customization but does not have a corresponding directory in the account customizations repo."
          exit 1
        fi

      - |
        echo "Found at least one customization, running customization setup."

        # Configure Development SSH Key
        ssh_key_parameter=$(aws ssm get-parameter --name /aft/config/aft-ssh-key --with-decryption 2> /dev/null || echo "None")

      - |
        if [[ $ssh_key_parameter != "None" ]]; then
          ssh_key=$(jq --raw-output ".Parameter.Value" <<< $ssh_key_parameter)
          mkdir -p ~/.ssh
          echo "Host *" >> ~/.ssh/config
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
          echo "UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          echo "$ssh_key" > ~/.ssh/ssh_key
          echo -e "\n\n" >>  ~/.ssh/ssh_key
          chmod 600 ~/.ssh/ssh_key
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/ssh_key
        fi   

      - |
        # Clone AFT
        AWS_MODULE_SOURCE=$(aws ssm get-parameter --name "/aft/config/aft-pipeline-code-source/repo-url" --query "Parameter.Value" --output text)
        AWS_MODULE_GIT_REF=$(aws ssm get-parameter --name "/aft/config/aft-pipeline-code-source/repo-git-ref" --query "Parameter.Value" --output text)
        git config --global credential.helper '!aws codecommit credential-helper $@'
        git config --global credential.UseHttpPath true
        git clone --quiet -b $AWS_MODULE_GIT_REF $AWS_MODULE_SOURCE aws-aft-core-framework

      - |
        # Install AFT Python Dependencies
        python3 -m venv $DEFAULT_PATH/aft-venv
        $DEFAULT_PATH/aft-venv/bin/pip install pip==22.1.2
        $DEFAULT_PATH/aft-venv/bin/pip install jinja2-cli==0.7.0 Jinja2==3.0.1 MarkupSafe==2.0.1 boto3==1.18.56 requests==2.26.0 # TODO - these should probably live in a requirements.txt file

      - |
        # Install API Helper Python Dependencies
        python3 -m venv $DEFAULT_PATH/api-helpers-venv

      - |
        # Generate session profiles
        chmod +x $DEFAULT_PATH/aws-aft-core-framework/sources/scripts/creds.sh
        $DEFAULT_PATH/aws-aft-core-framework/sources/scripts/creds.sh

      - |
        # Install Tofu
        echo "Installing Tofu"
        curl -L -o tofu_${TF_VERSION}_linux_amd64.zip https://github.com/opentofu/opentofu/releases/download/v${TF_VERSION}/tofu_${TF_VERSION}_linux_amd64.zip
        unzip -o tofu_${TF_VERSION}_linux_amd64.zip && mv tofu /usr/bin
        tofu --version
        cd $DEFAULT_PATH

      - |
        # Loop over all customizations
        IFS="," read -ra CUSTOMIZATION_ARRAY <<< "$CUSTOMIZATION_RAW"
        for CUSTOMIZATION in "${CUSTOMIZATION_ARRAY[@]}"; do
          if [[ ! -d "$DEFAULT_PATH/$CUSTOMIZATION" ]]; then
            echo "Error: ${CUSTOMIZATION} directory does not exist"
            exit 1
          fi
        
          echo "Found customization" ${CUSTOMIZATION}

          # Install customization-specific requirements
          $DEFAULT_PATH/api-helpers-venv/bin/pip install -r $DEFAULT_PATH/$CUSTOMIZATION/api_helpers/python/requirements.txt

          # Mark helper scripts as executable
          chmod +x $DEFAULT_PATH/$CUSTOMIZATION/api_helpers/pre-api-helpers.sh
          chmod +x $DEFAULT_PATH/$CUSTOMIZATION/api_helpers/post-api-helpers.sh
        done


  pre_build:
    on-failure: ABORT
    commands:
      - |
        # Migration check: look for existing `terraform.tfstate` file in root from single-account-customization versions of AFT and move them to a subfolder for the customization
        RESPONSE=$(aws s3api head-object --bucket $TF_S3_BUCKET --key "${VENDED_ACCOUNT_ID}-aft-account-customizations/terraform.tfstate" >/dev/null 2>1; echo $?)
        if [[ $RESPONSE != 254 ]]; then
          IFS="," read -ra CUSTOMIZATION_ARRAY <<< "$CUSTOMIZATION_RAW"
          if [[ ${#CUSTOMIZATION_ARRAY[@]} -eq 0 ]]; then
            echo "WARNING: This account does not have any account customizations assigned to it. Skipping phase."
            exit 0
          fi
          if [[ ${#CUSTOMIZATION_ARRAY[@]} != 1 ]]; then
            echo "ERROR: Expected 1 customization during migration of pre-upgrade terraform.tfstate, but found ${#CUSTOMIZATION_ARRAY[@]}"
            exit 2
          fi
          aws s3 mv "s3://${TF_S3_BUCKET}/${VENDED_ACCOUNT_ID}-aft-account-customizations/terraform.tfstate" "s3://${TF_S3_BUCKET}/${VENDED_ACCOUNT_ID}-aft-account-customizations/${CUSTOMIZATION_ARRAY[0]}/terraform.tfstate"
          echo "Moved existing terraform.tfstate file to subfolder /${CUSTOMIZATION_ARRAY[0]}."
        fi
      - |
        # Destroy any customizations that were removed from the account; note, if removing the customization from AFT entirely, make sure to destroy any deployments of that customization BEFORE deleting the customization folder from aft-account-customizations!!
        IFS="," read -ra CUSTOMIZATION_ARRAY <<< "$CUSTOMIZATION_RAW"
        TF_S3_BUCKET=$(aws ssm get-parameter --name "/aft/config/oss-backend/bucket-id" --query "Parameter.Value" --output text) 
        CUSTOMIZATION_KEYS_ARRAY=$(aws s3api list-objects-v2 --bucket $TF_S3_BUCKET --prefix "${VENDED_ACCOUNT_ID}-aft-account-customizations/" --delimiter "/" --query "CommonPrefixes[].Prefix" --output text) # TODO - this approach does not support TFC, only S3-backed TF
        if [[ "$CUSTOMIZATION_KEYS_ARRAY" = "None" ]] ; then
          CUSTOMIZATION_KEYS_ARRAY=() # replace with an empty array instead of "None"
        fi
        echo "Array of existing keys in state bucket: $CUSTOMIZATION_KEYS_ARRAY"

        # Loop over the CUSTOMIZATION_KEYS_ARRAY and create an array of customizations NOT in the CUSTOMIZATION_ARRAY. These resources will be tf-destroyed.
        CUSTOMIZATIONS_TO_DESTROY=()
        for KEY in ${CUSTOMIZATION_KEYS_ARRAY}; do
          JUST_THE_KEY_NO_PATH=$(echo ${KEY%/} | awk -F'/' '{print $NF}')
          if [[ ! " ${CUSTOMIZATION_ARRAY[*]} " =~ " ${JUST_THE_KEY_NO_PATH} " ]]; then
            CUSTOMIZATIONS_TO_DESTROY+=("$JUST_THE_KEY_NO_PATH")
            echo "${JUST_THE_KEY_NO_PATH} is NOT in the Active Customization Array ${CUSTOMIZATION_ARRAY[*]} so added to list to be destroyed."
          else
            echo "${JUST_THE_KEY_NO_PATH} is in the Active Customization Array ${CUSTOMIZATION_ARRAY[*]} so should not be destroyed."
          fi
        done
        echo "Customizations to destroy: $CUSTOMIZATIONS_TO_DESTROY"


        for CUSTOMIZATION_KEY in "${CUSTOMIZATIONS_TO_DESTROY[@]}"; do
          source $DEFAULT_PATH/api-helpers-venv/bin/activate
          export AWS_PROFILE=aft-target
          $DEFAULT_PATH/$CUSTOMIZATION_KEY/api_helpers/pre-api-helpers.sh
          unset AWS_PROFILE
          source $DEFAULT_PATH/aft-venv/bin/activate
          TF_BACKEND_REGION=$(aws ssm get-parameter --name "/aft/config/oss-backend/primary-region" --query "Parameter.Value" --output text)
          TF_KMS_KEY_ID=$(aws ssm get-parameter --name "/aft/config/oss-backend/kms-key-id" --query "Parameter.Value" --output text)
          TF_DDB_TABLE=$(aws ssm get-parameter --name "/aft/config/oss-backend/table-id" --query "Parameter.Value" --output text)
          TF_S3_BUCKET=$(aws ssm get-parameter --name "/aft/config/oss-backend/bucket-id" --query "Parameter.Value" --output text)
          TF_S3_KEY=$VENDED_ACCOUNT_ID-aft-account-customizations/$CUSTOMIZATION_KEY/terraform.tfstate

          cd $DEFAULT_PATH/$CUSTOMIZATION_KEY/terraform
          if ls *.jinja >/dev/null 2>&1; then
            for f in *.jinja; do
              jinja2 "$f" -D timestamp="$TIMESTAMP" -D tf_distribution_type="$TF_DISTRIBUTION" \
                -D provider_region="$CT_MGMT_REGION" -D region="$TF_BACKEND_REGION" \
                -D aft_admin_role_arn="$AFT_EXEC_ROLE_ARN" -D target_admin_role_arn="$VENDED_EXEC_ROLE_ARN" \
                -D bucket="$TF_S3_BUCKET" -D key="$TF_S3_KEY" -D dynamodb_table="$TF_DDB_TABLE" \
                -D kms_key_id="$TF_KMS_KEY_ID" -D tf_version="$TF_VERSION" >> "./$(basename "$f" .jinja).tf"
            done
          else
            echo "No Jinja2 templates found - skipping template processing"
          fi
          for f in *.tf; do echo "\n \n"; echo $f; cat $f; done
      
          cd $DEFAULT_PATH/$CUSTOMIZATION_KEY/terraform
          export AWS_PROFILE=aft-management-admin
          tofu init 
          tofu destroy --auto-approve
          unset AWS_PROFILE
          # Delete all versions of the object so that the bucket is clean - TODO - AFT doesn't currently have permissions to delete versions in S3.
          # echo "Deleting all versions of state keys in $TF_S3_KEY"
          # ALL_VERSIONS=$(aws s3api list-object-versions --bucket "$TF_S3_BUCKET" --prefix "$TF_S3_KEY" | jq -r '.Versions[].VersionId')
          # for VERSION in $ALL_VERSIONS; do
          #   aws s3api delete-object --bucket "$TF_S3_BUCKET" --key "$TF_S3_KEY" --version-id "$VERSION"
          # done
        done

  build:
    on-failure: CONTINUE
    commands:
      # Apply Customizations
      - |
        IFS="," read -ra CUSTOMIZATION_ARRAY <<< "$CUSTOMIZATION_RAW"
        for CUSTOMIZATION in "${CUSTOMIZATION_ARRAY[@]}"; do
          echo "Deploying Customization ${CUSTOMIZATION}"
          source $DEFAULT_PATH/api-helpers-venv/bin/activate
          export AWS_PROFILE=aft-target
          $DEFAULT_PATH/$CUSTOMIZATION/api_helpers/pre-api-helpers.sh # note: if file not found, check that line endings are LF not CRLF
          unset AWS_PROFILE
          source $DEFAULT_PATH/aft-venv/bin/activate
          TF_BACKEND_REGION=$(aws ssm get-parameter --name "/aft/config/oss-backend/primary-region" --query "Parameter.Value" --output text)
          TF_KMS_KEY_ID=$(aws ssm get-parameter --name "/aft/config/oss-backend/kms-key-id" --query "Parameter.Value" --output text)
          TF_DDB_TABLE=$(aws ssm get-parameter --name "/aft/config/oss-backend/table-id" --query "Parameter.Value" --output text)
          TF_S3_BUCKET=$(aws ssm get-parameter --name "/aft/config/oss-backend/bucket-id" --query "Parameter.Value" --output text)
          TF_S3_KEY=$VENDED_ACCOUNT_ID-aft-account-customizations/$CUSTOMIZATION/terraform.tfstate

          cd $DEFAULT_PATH/$CUSTOMIZATION/terraform
          if ls *.jinja >/dev/null 2>&1; then
            for f in *.jinja; do
              jinja2 "$f" -D timestamp="$TIMESTAMP" -D tf_distribution_type="$TF_DISTRIBUTION" \
                -D provider_region="$CT_MGMT_REGION" -D region="$TF_BACKEND_REGION" \
                -D aft_admin_role_arn="$AFT_EXEC_ROLE_ARN" -D target_admin_role_arn="$VENDED_EXEC_ROLE_ARN" \
                -D bucket="$TF_S3_BUCKET" -D key="$TF_S3_KEY" -D dynamodb_table="$TF_DDB_TABLE" \
                -D kms_key_id="$TF_KMS_KEY_ID" -D tf_version="$TF_VERSION" >> "./$(basename "$f" .jinja).tf"
            done
          else
            echo "No Jinja2 templates found - skipping template processing"
          fi
          for f in *.tf; do echo "\n \n"; echo $f; cat $f; done
      
          cd $DEFAULT_PATH/$CUSTOMIZATION/terraform
          export AWS_PROFILE=aft-management-admin
          tofu init
          tofu apply --auto-approve
        done
  

  post_build:
    on-failure: ABORT
    commands:
      - |
        IFS="," read -ra CUSTOMIZATION_ARRAY <<< "$CUSTOMIZATION_RAW"
        if [[ ! -z "${CUSTOMIZATION_ARRAY[0]}" ]]; then
          export PYTHONPATH="$DEFAULT_PATH/aws-aft-core-framework/sources/aft-lambda-layer:$PYTHONPATH"
          export AWS_PROFILE=aft-management
          python3 $DEFAULT_PATH/aws-aft-core-framework/sources/aft-lambda-layer/aft_common/metrics.py --codebuild-name "aft-account-customizations" --codebuild-status $CODEBUILD_BUILD_SUCCEEDING # TODO - install requests?
          unset AWS_PROFILE
        fi
      - |
        if [[ $CODEBUILD_BUILD_SUCCEEDING == 0 ]]; then
          exit 1
        fi
      - |
        IFS="," read -ra CUSTOMIZATION_ARRAY <<< "$CUSTOMIZATION_RAW"
        for CUSTOMIZATION in "${CUSTOMIZATION_ARRAY[@]}"; do
          source $DEFAULT_PATH/api-helpers-venv/bin/activate
          export AWS_PROFILE=aft-target
          $DEFAULT_PATH/$CUSTOMIZATION/api_helpers/post-api-helpers.sh
        done